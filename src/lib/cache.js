// src/lib/cache.js
// –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ —Å TTL

class MemoryCache {
  constructor() {
    this.cache = new Map();
    this.ttl = new Map();
    this.defaultTTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    setInterval(() => this.cleanup(), 2 * 60 * 1000);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à
  set(key, value, ttl = this.defaultTTL) {
    const expiresAt = Date.now() + ttl;
    this.cache.set(key, value);
    this.ttl.set(key, expiresAt);
    
    console.log(`üíæ Cache SET: ${key} (expires in ${ttl/1000}s)`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
  get(key) {
    const expiresAt = this.ttl.get(key);
    
    if (!expiresAt) {
      return null; // –ö–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
    
    if (Date.now() > expiresAt) {
      // –ó–∞–ø–∏—Å—å —É—Å—Ç–∞—Ä–µ–ª–∞, —É–¥–∞–ª—è–µ–º
      this.delete(key);
      return null;
    }
    
    console.log(`üìñ Cache HIT: ${key}`);
    return this.cache.get(key);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
  has(key) {
    const expiresAt = this.ttl.get(key);
    if (!expiresAt) return false;
    
    if (Date.now() > expiresAt) {
      this.delete(key);
      return false;
    }
    
    return true;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
  delete(key) {
    this.cache.delete(key);
    this.ttl.delete(key);
    console.log(`üóëÔ∏è Cache DELETE: ${key}`);
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
  clear() {
    this.cache.clear();
    this.ttl.clear();
    console.log('üßπ Cache CLEAR: all entries removed');
  }

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
  cleanup() {
    const now = Date.now();
    let cleanedCount = 0;
    
    for (const [key, expiresAt] of this.ttl.entries()) {
      if (now > expiresAt) {
        this.delete(key);
        cleanedCount++;
      }
    }
    
    if (cleanedCount > 0) {
      console.log(`üßπ Cache CLEANUP: ${cleanedCount} expired entries removed`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
  getStats() {
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys()),
      memoryUsage: process.memoryUsage?.() || 'N/A'
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
const cache = new MemoryCache();

export default cache; 