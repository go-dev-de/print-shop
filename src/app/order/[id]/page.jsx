'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';

const STATUS_LABELS = {
  new: '–ù–æ–≤—ã–π',
  processing: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
  printed: '–ù–∞–ø–µ—á–∞—Ç–∞–Ω',
  shipped: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
  completed: '–ó–∞–≤–µ—Ä—à–µ–Ω',
  cancelled: '–û—Ç–º–µ–Ω–µ–Ω',
};

const StatusBadge = ({ status }) => {
  const colors = {
    new: 'bg-blue-900/50 text-blue-200 border-blue-600',
    processing: 'bg-yellow-900/50 text-yellow-200 border-yellow-600',
    printed: 'bg-purple-900/50 text-purple-200 border-purple-600',
    shipped: 'bg-orange-900/50 text-orange-200 border-orange-600',
    completed: 'bg-green-900/50 text-green-200 border-green-600',
    cancelled: 'bg-red-900/50 text-red-200 border-red-600',
  };
  
  return (
    <span className={`px-3 py-1.5 rounded-full text-xs font-medium border ${colors[status] || 'bg-gray-700 text-gray-200 border-gray-600'}`}>
      {STATUS_LABELS[status] || status}
    </span>
  );
};

export default function OrderPage() {
  const params = useParams();
  const router = useRouter();
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    async function loadOrder() {
      try {
        const res = await fetch(`/api/orders/${params.id}`, { cache: 'no-store' });
        const data = await res.json();
        
        if (!res.ok) {
          throw new Error(data.error || '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –∑–∞–∫–∞–∑:', data.order);
        console.log('üñºÔ∏è Payload image:', data.order?.payload?.image);
        console.log('üëï Payload previewImage:', data.order?.payload?.previewImage);
        console.log('üìç Payload imagePosition:', data.order?.payload?.imagePosition);
        console.log('üîç –í—Å–µ –∫–ª—é—á–∏ payload:', Object.keys(data.order?.payload || {}));
        console.log('üìÑ –ü–æ–ª–Ω—ã–π payload:', data.order?.payload);
        
        setOrder(data.order);
      } catch (e) {
        setError(String(e.message || e));
      } finally {
        setLoading(false);
      }
    }

    if (params.id) {
      loadOrder();
    }
  }, [params.id]);

  const downloadJSON = (data, filename) => {
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const downloadImage = (dataUrl, filename) => {
    const a = document.createElement('a');
    a.href = dataUrl;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  };

  const calculateDisplayTotal = (order) => {
    if (order.payload?.totalPrice && order.payload.totalPrice > 0) {
      return order.payload.totalPrice;
    }
    
    if (order.payload?.pricing?.orderTotal && order.payload.pricing.orderTotal > 0) {
      return order.payload.pricing.orderTotal;
    }
    
    const basePrice = order.payload?.pricing?.baseTshirtPrice || 700;
    const printPrice = order.payload?.pricing?.printPricePerUnit || order.payload?.printPricePerUnit || 0;
    const quantity = order.payload?.quantity || order.payload?.pricing?.quantity || 1;
    const shipping = order.payload?.pricing?.shippingCost || 0;
    const discountPercent = order.payload?.discountPercent || 0;
    
    let subtotal = (basePrice + printPrice) * quantity;
    
    if (discountPercent > 0) {
      const discount = Math.round((subtotal * discountPercent) / 100);
      subtotal = Math.max(0, subtotal - discount);
    }
    
    const total = subtotal + shipping;
    
    if (total <= 0 && order.totalPrice && order.totalPrice > 0) {
      return order.totalPrice;
    }
    
    return total;
  };

  const renderPriceBreakdown = (order) => {
    const basePrice = order.payload?.pricing?.baseTshirtPrice || 700;
    const printPrice = order.payload?.pricing?.printPricePerUnit || order.payload?.printPricePerUnit || 0;
    const quantity = order.payload?.quantity || order.payload?.pricing?.quantity || 1;
    const shipping = order.payload?.pricing?.shippingCost || 0;
    const discountPercent = order.payload?.discountPercent || 0;
    
    const subtotal = (basePrice + printPrice) * quantity;
    const discountAmount = discountPercent > 0 ? Math.round((subtotal * discountPercent) / 100) : 0;
    
    return (
      <div className="space-y-1">
        <div>–§—É—Ç–±–æ–ª–∫–∞: {basePrice} ‚ÇΩ</div>
        {printPrice > 0 && <div>–ü—Ä–∏–Ω—Ç: {printPrice} ‚ÇΩ</div>}
        {quantity > 1 && <div>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.</div>}
        {quantity > 1 && <div>–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞: {subtotal} ‚ÇΩ</div>}
        {discountPercent > 0 && (
          <div className="text-red-400">–°–∫–∏–¥–∫–∞ {discountPercent}%: -{discountAmount} ‚ÇΩ</div>
        )}
        {shipping > 0 && <div>–î–æ—Å—Ç–∞–≤–∫–∞: {shipping} ‚ÇΩ</div>}
      </div>
    );
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-600 text-xl mb-4">‚ùå –û—à–∏–±–∫–∞</div>
          <p className="text-gray-600 mb-4">{error}</p>
          <button 
            onClick={() => router.back()}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            –ù–∞–∑–∞–¥
          </button>
        </div>
      </div>
    );
  }

  if (!order) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-gray-600 text-xl mb-4">–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
          <button 
            onClick={() => router.back()}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            –ù–∞–∑–∞–¥
          </button>
        </div>
      </div>
    );
  }

  // Debug render
  console.log('üé® OrderPage render:', {
    orderId: order.id,
    hasImage: !!order.payload?.image,
    hasPreviewImage: !!order.payload?.previewImage,
    hasImagePosition: !!order.payload?.imagePosition,
    payloadKeys: Object.keys(order.payload || {})
  });

  return (
    <div className="min-h-screen bg-gray-800">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-light text-white mb-2">–ó–∞–∫–∞–∑ #{order.id?.slice(0, 8)}...</h1>
              <p className="text-gray-300">–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</p>
            </div>
            <div className="flex items-center gap-4">
              <StatusBadge status={order.status} />
              <button 
                onClick={() => router.back()}
                className="px-4 py-2.5 rounded-lg bg-gray-700 border border-gray-600 text-gray-200 hover:bg-gray-600 hover:border-gray-500 font-medium transition-all duration-200"
              >
                –ù–∞–∑–∞–¥
              </button>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="bg-gray-700 rounded-xl border border-gray-600 shadow-lg">
          <div className="p-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Left Column - Order Details */}
              <div className="lg:col-span-2 space-y-6">
                {/* Basic Order Info */}
                <div className="bg-gray-600 rounded-xl border border-gray-500 p-6">
                  <h2 className="text-xl font-semibold text-white mb-4">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-300">ID –∑–∞–∫–∞–∑–∞:</span>
                      <div className="font-mono text-gray-100">{order.id}</div>
                    </div>
                    <div>
                      <span className="text-gray-300">–°—Ç–∞—Ç—É—Å:</span>
                      <div className="font-semibold text-white">{STATUS_LABELS[order.status] || order.status}</div>
                    </div>
                    <div>
                      <span className="text-gray-300">–°–æ–∑–¥–∞–Ω:</span>
                      <div className="text-gray-100">{new Date(order.createdAt).toLocaleString('ru-RU')}</div>
                    </div>
                    <div>
                      <span className="text-gray-300">–ò—Ç–æ–≥–æ:</span>
                      <div className="font-bold text-green-400 text-lg">
                        {calculateDisplayTotal(order)} ‚ÇΩ
                      </div>
                    </div>
                  </div>
                  <div className="mt-4 text-sm text-gray-300">
                    {renderPriceBreakdown(order)}
                  </div>
                </div>

                {/* Customer Info */}
                <div className="bg-gray-600 rounded-xl border border-gray-500 p-6">
                  <h2 className="text-xl font-semibold text-white mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-300">–ò–º—è:</span>
                      <div className="text-gray-100">{order.payload?.customerName || order.payload?.customer?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                    </div>
                    <div>
                      <span className="text-gray-300">Email:</span>
                      <div className="text-gray-100">{order.payload?.email || order.payload?.customer?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                    </div>
                    <div>
                      <span className="text-gray-300">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                      <div className="text-gray-100">{order.payload?.phone || order.payload?.customer?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                    </div>
                    <div>
                      <span className="text-gray-300">–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</span>
                      <div className="text-gray-100">
                        {order.payload?.deliveryMethod === 'delivery' ? '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}
                      </div>
                    </div>
                    {order.payload?.deliveryMethod === 'delivery' && (
                      <div className="md:col-span-2">
                        <span className="text-gray-300">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</span>
                        <div className="text-gray-100">
                          {order.payload?.address || order.payload?.customer?.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                          {order.payload?.city || order.payload?.customer?.city ? `, ${order.payload.city || order.payload.customer.city}` : ''}
                          {order.payload?.postalCode || order.payload?.customer?.postalCode ? `, ${order.payload.postalCode || order.payload.customer.postalCode}` : ''}
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Product Details */}
                <div className="bg-gray-600 rounded-xl border border-gray-500 p-6">
                  <h2 className="text-xl font-semibold text-white mb-4">–î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞</h2>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <span className="text-gray-300">–¢–æ–≤–∞—Ä:</span>
                      <div className="text-gray-100">{order.payload?.productName || '–§—É—Ç–±–æ–ª–∫–∞ —Å –ø—Ä–∏–Ω—Ç–æ–º'}</div>
                    </div>
                    <div>
                      <span className="text-gray-300">–†–∞–∑–º–µ—Ä:</span>
                      <div className="text-gray-100">{order.payload?.size || 'M'}</div>
                    </div>
                    <div>
                      <span className="text-gray-300">–¶–≤–µ—Ç:</span>
                      <div className="text-gray-100">{order.payload?.color || '–±–µ–ª—ã–π'}</div>
                    </div>
                    <div>
                      <span className="text-gray-300">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                      <div className="text-gray-100">{order.payload?.quantity || 1} —à—Ç.</div>
                    </div>
                  </div>
                </div>

                {/* Print Position Info */}
                {order.payload?.imagePosition && (
                  <div className="bg-gray-600 rounded-xl border border-gray-500 p-6">
                    <h2 className="text-xl font-semibold text-white mb-4">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–Ω—Ç–∞</h2>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div>
                        <span className="text-gray-300">–ü–æ–∑–∏—Ü–∏—è X:</span>
                        <div className="text-gray-100 font-mono">{Math.round(order.payload.imagePosition.x)}%</div>
                      </div>
                      <div>
                        <span className="text-gray-300">–ü–æ–∑–∏—Ü–∏—è Y:</span>
                        <div className="text-gray-100 font-mono">{Math.round(order.payload.imagePosition.y)}%</div>
                      </div>
                      <div>
                        <span className="text-gray-300">–ú–∞—Å—à—Ç–∞–±:</span>
                        <div className="text-gray-100 font-mono">{Math.round((order.payload.imagePosition.scale || 1) * 100)}%</div>
                      </div>
                      <div>
                        <span className="text-gray-300">–°—Ç–æ—Ä–æ–Ω–∞:</span>
                        <div className="text-gray-100">{order.payload.imageSide || 'front'}</div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Right Column - Images and Downloads */}
              <div className="space-y-6">
                {/* Download Buttons */}
                <div className="bg-gray-600 rounded-xl border border-gray-500 p-6">
                  <h2 className="text-xl font-semibold text-white mb-4">–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã</h2>
                  <div className="space-y-3">
                    {order.payload?.image ? (
                      <button 
                        className="w-full px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium"
                        onClick={() => downloadImage(order.payload.image, `order-${order.id}-print.png`)}
                      >
                        üñºÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–Ω—Ç
                      </button>
                    ) : (
                      <button 
                        className="w-full px-4 py-3 bg-gray-500 text-gray-300 rounded-lg cursor-not-allowed"
                        disabled
                      >
                        üñºÔ∏è –ü—Ä–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                      </button>
                    )}
                    
                    {order.payload?.previewImage ? (
                      <button 
                        className="w-full px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors font-medium"
                        onClick={() => downloadImage(order.payload.previewImage, `order-${order.id}-preview.jpg`)}
                      >
                        üëï –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–≤—å—é —Ñ—É—Ç–±–æ–ª–∫–∏
                      </button>
                    ) : (
                      <button 
                        className="w-full px-4 py-3 bg-gray-500 text-gray-300 rounded-lg cursor-not-allowed"
                        disabled
                      >
                        üëï –ü—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                      </button>
                    )}
                  </div>
                </div>

                {/* Images Preview */}
                <div className="bg-gray-600 rounded-xl border border-gray-500 p-6">
                  <h2 className="text-xl font-semibold text-white mb-4">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h2>
                  
                  {/* Debug Info */}
                  <div className="mb-4 p-3 bg-gray-700 rounded-lg text-xs text-gray-300">
                    <div>üñºÔ∏è Image: {order.payload?.image ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</div>
                    <div>üëï PreviewImage: {order.payload?.previewImage ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</div>
                    <div>üìç ImagePosition: {order.payload?.imagePosition ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</div>
                    {order.payload?.imagePosition && (
                      <div className="mt-2">
                        <div>X: {Math.round(order.payload.imagePosition.x)}%</div>
                        <div>Y: {Math.round(order.payload.imagePosition.y)}%</div>
                        <div>Scale: {Math.round((order.payload.imagePosition.scale || 1) * 100)}%</div>
                        <div>Side: {order.payload.imageSide || 'front'}</div>
                      </div>
                    )}
                  </div>
                  
                  <div className="space-y-4">
                    {order.payload?.image && (
                      <div>
                        <h3 className="font-medium text-gray-200 mb-2">–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–∏–Ω—Ç</h3>
                        <div className="relative">
                          <img 
                            src={order.payload.image} 
                            alt="–ü—Ä–∏–Ω—Ç" 
                            className="w-full h-48 object-contain bg-gray-500 rounded-lg border border-gray-400"
                            onError={(e) => {
                              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–Ω—Ç–∞:', e);
                              e.target.style.display = 'none';
                            }}
                          />
                        </div>
                      </div>
                    )}
                    {order.payload?.previewImage && (
                      <div>
                        <h3 className="font-medium text-gray-200 mb-2">–ü—Ä–µ–≤—å—é —Ñ—É—Ç–±–æ–ª–∫–∏</h3>
                        <div className="relative">
                          <img 
                            src={order.payload.previewImage} 
                            alt="–ü—Ä–µ–≤—å—é —Ñ—É—Ç–±–æ–ª–∫–∏" 
                            className="w-full h-48 object-contain bg-gray-500 rounded-lg border border-gray-400"
                            onError={(e) => {
                              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é:', e);
                              e.target.style.display = 'none';
                            }}
                          />
                        </div>
                      </div>
                    )}
                    
                    {!order.payload?.image && !order.payload?.previewImage && (
                      <div className="text-center py-8 text-gray-400">
                        <div className="text-4xl mb-2">üñºÔ∏è</div>
                        <p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        <p className="text-sm mt-1">–í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ø—Ä–∏–Ω—Ç–∞</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 