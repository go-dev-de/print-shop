'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import ProductCard from '@/components/ProductCard';
import UserProfile from '@/components/UserProfile';
import MobileMenu from '@/components/MobileMenu';
import CartDropdown from '@/components/CartDropdown';
import CartNotification from '@/components/CartNotification';
import { ProductGridSkeleton } from '@/components/LoadingSkeletons';
import Image from 'next/image';
import { useProductsCache } from '@/components/useProductsCache';

export default function ProductsPage() {
  const [products, setProducts] = useState([]);
  const [sections, setSections] = useState([]);
  const [selectedSection, setSelectedSection] = useState('all');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalProducts, setTotalProducts] = useState(0);
  const [hasNextPage, setHasNextPage] = useState(false);
  const [hasPrevPage, setHasPrevPage] = useState(false);
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { getCachedData, setCachedData, hasCachedData, getCacheStats } = useProductsCache();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–∞–∑–¥–µ–ª–∞
        const cacheKey = `${selectedSection}:${currentPage}`;
        if (hasCachedData(cacheKey)) {
          console.log('üìñ Using cached data for:', cacheKey);
          const cachedData = getCachedData(cacheKey);
          setProducts(cachedData.products || []);
          setSections(cachedData.sections || []);
          setTotalPages(cachedData.pagination?.totalPages || 1);
          setTotalProducts(cachedData.pagination?.totalProducts || 0);
          setHasNextPage(cachedData.pagination?.hasNextPage || false);
          setHasPrevPage(cachedData.pagination?.hasPrevPage || false);
          setLoading(false);
          return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        const response = await fetch(`/api/products/paginated?page=${currentPage}&limit=20&section=${selectedSection}`);
        if (!response.ok) throw new Error('Failed to fetch products');
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setProducts(data.products || []);
        setSections(data.sections || []);
        setTotalPages(data.pagination?.totalPages || 1);
        setTotalProducts(data.pagination?.totalProducts || 0);
        setHasNextPage(data.pagination?.hasNextPage || false);
        setHasPrevPage(data.pagination?.hasPrevPage || false);
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setCachedData(cacheKey, data);
        
        console.log(`‚úÖ Loaded page ${currentPage} with ${data.products?.length || 0} products`);
        
      } catch (err) {
        console.error('Error fetching products:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [currentPage, selectedSection, hasCachedData, getCachedData, setCachedData]);

  // –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const goToPage = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };
  
  const goToNextPage = () => {
    if (hasNextPage) {
      setCurrentPage(prev => prev + 1);
    }
  };
  
  const goToPrevPage = () => {
    if (hasPrevPage) {
      setCurrentPage(prev => prev - 1);
    }
  };
  
  // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∑–¥–µ–ª–∞
  useEffect(() => {
    setCurrentPage(1);
  }, [selectedSection]);
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª—É (—Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
  const filteredProducts = products;

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-800">
        <header className="shadow-lg sticky top-0 z-40" style={{backgroundColor: '#424242'}}>
          <div className="max-w-sm mx-auto px-4 sm:max-w-7xl sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-6">
              <div className="flex items-center">
                <h1 className="text-3xl logo-print-shop h-full flex items-center">
                  <Link href="/" className="text-white hover:text-gray-200 transition-colors duration-200 h-full flex items-center">
                    <div className="hidden md:block">
                      <Image 
                        src="/print-style-logo.png" 
                        alt="Print Style Logo" 
                        width={120} 
                        height={40}
                        className="h-full w-auto"
                      />
                    </div>
                    <div className="md:hidden">
                      <Image 
                        src="/print-style-logo.png" 
                        alt="Print Style Logo" 
                        width={120} 
                        height={40}
                        className="h-full w-auto"
                      />
                    </div>
                  </Link>
                </h1>
                
                <div className="ml-6 hidden md:block"><UserProfile /></div>
              </div>
              <nav className="hidden md:flex space-x-8">
                <Link href="/#main" className="text-gray-200 hover:text-blue-400">–ì–ª–∞–≤–Ω–∞—è</Link>
                <Link href="/products" className="text-blue-400 font-medium">–¢–æ–≤–∞—Ä—ã</Link>
                <Link href="/#reviews" className="text-gray-200 hover:text-blue-400">–û—Ç–∑—ã–≤—ã</Link>
                <Link href="/#about" className="text-gray-200 hover:text-blue-400">–û –Ω–∞—Å</Link>
                <Link href="/#contacts" className="text-gray-200 hover:text-blue-400">–ö–æ–Ω—Ç–∞–∫—Ç—ã</Link>
              </nav>
            </div>
          </div>
        </header>
        
        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <main className="max-w-6xl mx-auto px-4 py-8">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
          <div className="text-center mb-8">
            <div className="animate-pulse">
              <div className="h-10 bg-gray-200 rounded w-64 mx-auto mb-4"></div>
              <div className="h-6 bg-gray-200 rounded w-96 mx-auto"></div>
            </div>
          </div>
          
          {/* Skeleton –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ */}
          <ProductGridSkeleton count={8} />
        </main>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-800">
        <header className="shadow-lg sticky top-0 z-40" style={{backgroundColor: '#424242'}}>
          <div className="max-w-sm mx-auto px-4 sm:max-w-7xl sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-6">
              <div className="flex items-center">
                <h1 className="text-3xl logo-print-shop h-full flex items-center">
                  <Link href="/" className="text-white hover:text-gray-200 transition-colors duration-200 h-full flex items-center">
                    <div className="hidden md:block">
                      <Image 
                        src="/print-style-logo.png" 
                        alt="Print Style Logo" 
                        width={120} 
                        height={40}
                        className="h-full w-auto"
                      />
                    </div>
                    <div className="md:hidden">
                      <Image 
                        src="/print-style-logo.png" 
                        alt="Print Style Logo" 
                        width={120} 
                        height={40}
                        className="h-full w-auto"
                      />
                    </div>
                  </Link>
                </h1>
                
                <div className="ml-6 hidden md:block"><UserProfile /></div>
              </div>
              <nav className="hidden md:flex space-x-8">
                <Link href="/#main" className="text-gray-200 hover:text-blue-400">–ì–ª–∞–≤–Ω–∞—è</Link>
                <Link href="/products" className="text-blue-400 font-medium">–¢–æ–≤–∞—Ä—ã</Link>
                <Link href="/#reviews" className="text-gray-200 hover:text-blue-400">–û—Ç–∑—ã–≤—ã</Link>
                <Link href="/#about" className="text-gray-200 hover:text-blue-400">–û –Ω–∞—Å</Link>
                <Link href="/#contacts" className="text-gray-200 hover:text-blue-400">–ö–æ–Ω—Ç–∞–∫—Ç—ã</Link>
              </nav>
            </div>
          </div>
        </header>
        
        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <main className="max-w-6xl mx-auto px-4 py-8">
          <div className="flex items-center justify-center min-h-96">
            <div className="text-center bg-gray-700 rounded-lg shadow-lg p-8">
              <div className="text-red-400 text-6xl mb-4">‚ö†Ô∏è</div>
              <h3 className="text-xl font-semibold text-white mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
              <p className="text-gray-300 mb-4">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã: {error}</p>
              <button 
                onClick={() => window.location.reload()}
                className="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 transition-colors"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-800">
      {/* Header */}
      <header className="shadow-lg sticky top-0 z-40" style={{backgroundColor: '#424242'}}>
        <div className="container">
          <div className="flex justify-between items-center py-1">
            <div className="flex items-center space-x-8">
              <h1 className="text-2xl logo-print-shop h-full flex items-center">
                <Link href="/" className="text-white hover:text-gray-200 transition-colors duration-200 h-full flex items-center">
                  <div className="hidden md:block">
                    <Image 
                      src="/print-style-logo.png" 
                      alt="Print Style Logo" 
                      width={120} 
                      height={40}
                      className="h-full w-auto"
                    />
                  </div>
                  <div className="md:hidden">
                    <Image 
                      src="/print-style-logo.png" 
                      alt="Print Style Logo" 
                      width={120} 
                      height={40}
                      className="h-full w-auto"
                    />
                  </div>
                </Link>
              </h1>
            </div>
            
            {/* Desktop Navigation */}
            <nav className="hidden md:flex items-center space-x-1">
              <Link href="/#main" className="px-4 py-2 text-sm font-medium text-gray-200 hover:text-white transition-colors rounded-lg">–ì–ª–∞–≤–Ω–∞—è</Link>
              <Link href="/products" className="px-4 py-2 text-sm font-medium text-white hover:text-gray-200 transition-colors rounded-lg">–¢–æ–≤–∞—Ä—ã</Link>
              <Link href="/reviews" className="px-4 py-2 text-sm font-medium text-gray-200 hover:text-white hover:bg-gray-600 transition-all rounded-lg">–û—Ç–∑—ã–≤—ã</Link>
              <Link href="/#about" className="px-4 py-2 text-sm font-medium text-gray-200 hover:text-white hover:bg-gray-600 transition-all rounded-lg">–û –Ω–∞—Å</Link>
              <div className="flex items-center space-x-3 ml-4">
                <CartDropdown />
                <UserProfile />
              </div>
            </nav>
            
            {/* Mobile Menu */}
            <MobileMenu />
          </div>
        </div>
      </header>
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="container py-12 lg:py-16">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="text-center mb-12 animate-fade-in">
          <h1 className="text-hero text-white mb-6">–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</h1>
          <p className="text-body text-gray-300 max-w-2xl mx-auto">
            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏. –í—Å–µ –∏–∑–¥–µ–ª–∏—è –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–æ–¥ –∑–∞–∫–∞–∑ —Å –≤–∞—à–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.
          </p>
        </div>

        {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º */}
        {sections.length > 0 && (
          <div className="mb-12 animate-fade-in" style={{animationDelay: '0.2s'}}>
            <div className="flex flex-wrap justify-center gap-3">
              <button
                onClick={() => setSelectedSection('all')}
                className={`px-6 py-3 rounded-lg font-medium transition-all duration-300 ${
                  selectedSection === 'all'
                    ? 'bg-blue-600 text-white shadow-lg'
                    : 'bg-white text-gray-800 hover:bg-blue-600 hover:text-white hover:scale-105'
                }`}
              >
                –í—Å–µ —Ç–æ–≤–∞—Ä—ã ({totalProducts})
              </button>
              {sections.map((section, index) => (
                <button
                  key={section.id || `section-${index}`}
                  onClick={() => setSelectedSection(section.id)}
                  className={`px-6 py-3 rounded-lg font-medium transition-all duration-300 animate-fade-in ${
                    selectedSection === section.id
                      ? 'bg-blue-600 text-white shadow-lg'
                      : 'bg-white text-gray-800 hover:bg-blue-600 hover:text-white hover:scale-105'
                  }`}
                  style={{animationDelay: `${0.3 + index * 0.1}s`}}
                >
                  {section.name}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* –°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
        {filteredProducts.length > 0 ? (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {filteredProducts.map((product, index) => (
                <ProductCard key={product.id || `product-${index}`} product={product} />
              ))}
            </div>
            
            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            {totalPages > 1 && (
              <div className="mt-12 flex justify-center items-center space-x-2 animate-fade-in" style={{animationDelay: '0.5s'}}>
                {/* –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" */}
                <button
                  onClick={goToPrevPage}
                  disabled={!hasPrevPage}
                  className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                    hasPrevPage
                      ? 'bg-white text-gray-800 hover:bg-blue-600 hover:text-white hover:scale-105'
                      : 'bg-gray-600 text-gray-400 cursor-not-allowed'
                  }`}
                >
                  ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                </button>
                
                {/* –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü */}
                <div className="flex items-center space-x-1">
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    let pageNum;
                    if (totalPages <= 5) {
                      pageNum = i + 1;
                    } else if (currentPage <= 3) {
                      pageNum = i + 1;
                    } else if (currentPage >= totalPages - 2) {
                      pageNum = totalPages - 4 + i;
                    } else {
                      pageNum = currentPage - 2 + i;
                    }
                    
                    return (
                      <button
                        key={pageNum}
                        onClick={() => goToPage(pageNum)}
                        className={`w-10 h-10 rounded-lg font-medium transition-all duration-300 ${
                          currentPage === pageNum
                            ? 'bg-blue-600 text-white shadow-lg'
                            : 'bg-white text-gray-800 hover:bg-blue-600 hover:text-white hover:scale-105'
                        }`}
                      >
                        {pageNum}
                      </button>
                    );
                  })}
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è" */}
                <button
                  onClick={goToNextPage}
                  disabled={!hasNextPage}
                  className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                    hasNextPage
                      ? 'bg-white text-gray-800 hover:bg-blue-600 hover:text-white hover:scale-105'
                      : 'bg-gray-600 text-gray-400 cursor-not-allowed'
                  }`}
                >
                  –°–ª–µ–¥—É—é—â–∞—è ‚Üí
                </button>
              </div>
            )}
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö */}
            <div className="mt-4 text-center text-gray-400 text-sm">
              –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages} ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {totalProducts}
            </div>
            
            {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ */}
            <div className="mt-2 text-center">
              <button
                onClick={() => {
                  const stats = getCacheStats();
                  console.log('üìä Cache stats:', stats);
                  alert(`–ö—ç—à: ${stats.size} –∑–∞–ø–∏—Å–µ–π\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${stats.lastUpdate}\n–í–æ–∑—Ä–∞—Å—Ç: ${stats.age}—Å`);
                }}
                className="text-xs text-gray-500 hover:text-gray-300 underline"
              >
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
              </button>
            </div>
          </>
        ) : (
          <div className="text-center py-12">
            <div className="text-gray-400 text-6xl mb-4">üì¶</div>
            <h3 className="text-xl font-medium text-white mb-2">
              {selectedSection === 'all' ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'}
            </h3>
            <p className="text-gray-300 mb-6">
              {selectedSection === 'all' 
                ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥.'
                : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.'
              }
            </p>
            {selectedSection !== 'all' && (
              <button
                onClick={() => setSelectedSection('all')}
                className="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 transition-colors"
              >
                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
              </button>
            )}
          </div>
        )}

        {/* –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é */}
        {filteredProducts.length > 0 && (
          <div className="mt-16 text-center bg-gray-700 rounded-lg p-8 shadow-sm">
            <h2 className="text-2xl font-bold text-white mb-4">
              –ù–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä?
            </h2>
            <p className="text-gray-300 mb-6">
              –ú—ã –º–æ–∂–µ–º –∏–∑–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–Ω—Ç –Ω–∞ –ª—é–±–æ–º –∏–∑–¥–µ–ª–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
            </p>
            <Link
              href="/"
              className="inline-block bg-blue-600 text-white px-8 py-3 rounded-md hover:bg-blue-700 transition-colors font-medium"
            >
              –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –¥–∏–∑–∞–π–Ω
            </Link>
          </div>
        )}
      </main>
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É */}
      <CartNotification />
    </div>
  );
}