import { NextResponse } from 'next/server';
import { getSession } from '@/lib/session';
import { addProduct, listProducts } from '@/lib/catalogStore';
import { listProductsYdb, createProductYdb, deleteProductYdb } from '@/lib/ydb/catalogRepo';
import { ensureTablesExist } from '@/lib/ydb/autoInit';

export async function GET() {
  const user = await getSession();
  if (!user || user.role !== 'admin') return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  
  try {
    // Ensure tables exist
    await ensureTablesExist();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ YDB
    const ydbProducts = await listProductsYdb();
    const inMemoryProducts = listProducts();
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç YDB –¥–∞–Ω–Ω—ã–º
    const ydbIds = new Set(ydbProducts.map(p => p.id));
    const uniqueInMemoryProducts = inMemoryProducts.filter(p => !ydbIds.has(p.id));
    
    const allProducts = [...ydbProducts, ...uniqueInMemoryProducts];
    
    return NextResponse.json({ products: allProducts });
  } catch (error) {
    console.error('Failed to fetch products from YDB, falling back to in-memory:', error);
    return NextResponse.json({ products: listProducts() });
  }
}

export async function POST(request) {
  const user = await getSession();
  if (!user || user.role !== 'admin') return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  
  try {
    // Ensure tables exist
    await ensureTablesExist();
    
    const requestBody = await request.json();
    const { name, basePrice, sectionId, description, image, images } = requestBody;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const bodySize = JSON.stringify(requestBody).length;
    console.log('üìä DEBUG: Request body size:', bodySize, 'bytes', '~', Math.round(bodySize / 1024), 'KB');
    
    if (!name) return NextResponse.json({ error: 'Name required' }, { status: 400 });
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ YDB
    try {
      const productData = {
        name,
        basePrice: parseFloat(basePrice) || 0,
        description,
        section: sectionId,
        images: images && images.length > 0 ? images : (image ? [image] : [])
      };
      console.log('üíæ DEBUG: Creating product with data:', productData);
      console.log('üñºÔ∏è DEBUG: Images array:', productData.images, 'Type:', typeof productData.images, 'Length:', productData.images?.length);
      const newProduct = await createProductYdb(productData);
      console.log('üìÑ DEBUG: YDB returned product:', { id: newProduct.id, images: newProduct.images });
      console.log('‚úÖ DEBUG: Product created in YDB:', newProduct.id);
      const allProducts = await listProductsYdb();
      console.log('üìã DEBUG: All products after creation:', allProducts.length);
      return NextResponse.json({ product: newProduct, products: allProducts });
    } catch (ydbError) {
      console.error('‚ùå DEBUG: YDB product creation failed:', ydbError.message);
      console.error('‚ùå DEBUG: Full YDB error:', ydbError);
      console.warn('Failed to save product to YDB, falling back to in-memory:', ydbError);
      const p = addProduct({ name, basePrice, sectionId, description, image, images });
      return NextResponse.json({ product: p, products: listProducts() });
    }
  } catch (error) {
    console.error('Failed to create product:', error);
    return NextResponse.json({ error: 'Bad request' }, { status: 400 });
  }
}

export async function DELETE(request) {
  const user = await getSession();
  if (!user || user.role !== 'admin') return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
  
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    console.log('üîç DELETE request received. ID from params:', id, 'Type:', typeof id);
    console.log('üîó Full URL:', request.url);
    
    if (!id) {
      console.log('‚ùå No ID provided in request');
      return NextResponse.json({ error: 'Product ID required' }, { status: 400 });
    }
    
    console.log('üóëÔ∏è Attempting to delete product:', id);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ YDB
    try {
      await deleteProductYdb(id);
      console.log('‚úÖ Product deleted from YDB:', id);
      const allProducts = await listProductsYdb();
      console.log('üìã Returning updated products list, count:', allProducts.length);
      return NextResponse.json({ products: allProducts });
    } catch (ydbError) {
      console.error('‚ùå YDB product delete failed:', ydbError.message);
      console.error('‚ùå Full YDB error:', ydbError);
      return NextResponse.json({ error: 'Failed to delete product: ' + ydbError.message }, { status: 500 });
    }
  } catch (error) {
    console.error('‚ùå Failed to delete product:', error);
    return NextResponse.json({ error: 'Bad request: ' + error.message }, { status: 400 });
  }
}

