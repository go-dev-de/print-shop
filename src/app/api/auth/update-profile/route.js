import { NextResponse } from 'next/server';
import { getSession } from '@/lib/session';
import { getUserRepo, updateUserYdb, initSchemaIfNeeded } from '@/lib/ydb/repo';

export async function PUT(request) {
  try {
    const session = await getSession();
    console.log('üîç Session data:', session);
    
    if (!session?.id) {
      console.log('‚ùå No session or session.id');
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { name, email } = await request.json();
    console.log('üìù Update request data:', { name, email });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!email || !email.includes('@')) {
      return NextResponse.json({ error: 'Invalid email' }, { status: 400 });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É YDB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await initSchemaIfNeeded();
    
    console.log('üîÑ Updating user profile:', { userId: session.id, name, email });
    
    // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - —Ç–æ–ª—å–∫–æ –∏–º—è –∏ email
    const updatedUser = {
      id: session.id,
      email: email,
      name: name || session.name,
      role: session.role
    };
    
    console.log('‚úÖ User profile updated successfully:', updatedUser);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return NextResponse.json({
      id: updatedUser.id,
      name: updatedUser.name,
      email: updatedUser.email,
      role: updatedUser.role
    });

  } catch (error) {
    console.error('‚ùå Update profile error:', error);
    return NextResponse.json({ error: 'Internal server error', details: error.message }, { status: 500 });
  }
}