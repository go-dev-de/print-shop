'use client';

import { useState, useEffect, useRef } from 'react';
import Image from 'next/image';

export default function CartDropdown() {
  const [isOpen, setIsOpen] = useState(false);
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const dropdownRef = useRef(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadCart();
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
    const handleStorageChange = (e) => {
      if (e.key === 'printshop_cart') {
        loadCart();
      }
    };
    
    window.addEventListener('storage', handleStorageChange);
    
    // –°–ª—É—à–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    const handleCartUpdate = () => {
      loadCart();
    };
    
    window.addEventListener('cartUpdated', handleCartUpdate);
    
    return () => {
      window.removeEventListener('storage', handleStorageChange);
      window.removeEventListener('cartUpdated', handleCartUpdate);
    };
  }, []);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const loadCart = async () => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      try {
        const response = await fetch('/api/cart');
        if (response.ok) {
          const data = await response.json();
          if (data.cart && Array.isArray(data.cart.items)) {
            console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ YDB:', data.cart.items);
            setCartItems(data.cart.items);
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å localStorage
            localStorage.setItem('printStyle_cart', JSON.stringify(data.cart.items));
            return;
          }
        }
      } catch (apiError) {
        console.warn('API –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', apiError);
      }

      // Fallback –∫ localStorage –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const savedCart = localStorage.getItem('printshop_cart');
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage:', savedCart);
      if (savedCart) {
        const parsedCart = JSON.parse(savedCart);
        console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞:', parsedCart);
        setCartItems(Array.isArray(parsedCart) ? parsedCart : []);
      } else {
        setCartItems([]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      setCartItems([]);
    }
  };

  const saveCart = async (items) => {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Å—Ä–∞–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ UI
      localStorage.setItem('printshop_cart', JSON.stringify(items));
      setCartItems(items);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
      window.dispatchEvent(new CustomEvent('cartUpdated'));

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å API (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      try {
        const response = await fetch('/api/cart', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ items }),
        });
        
        if (response.ok) {
          console.log('–ö–æ—Ä–∑–∏–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å YDB');
        } else {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å YDB:', response.status);
        }
      } catch (apiError) {
        console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ—Ä–∑–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ localStorage:', apiError);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
    }
  };

  const addToCart = (product) => {
    console.log('–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É:', product);
    const existingItem = cartItems.find(item => 
      item.id === product.id && 
      item.size === product.size && 
      item.color === product.color
    );

    if (existingItem) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const updatedItems = cartItems.map(item =>
        item.id === existingItem.id && 
        item.size === existingItem.size && 
        item.color === existingItem.color
          ? { ...item, quantity: item.quantity + 1 }
          : item
      );
      saveCart(updatedItems);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
      const newItem = {
        id: product.id || Date.now(),
        name: product.name,
        price: product.price,
        image: product.image,
        size: product.size || 'M',
        color: product.color || '–±–µ–ª—ã–π',
        quantity: product.quantity || 1,
        addedAt: new Date().toISOString()
      };
      console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å –Ω–æ–≤—ã–º —Ç–æ–≤–∞—Ä–æ–º:', [...cartItems, newItem]);
      saveCart([...cartItems, newItem]);
    }
  };

  const updateQuantity = (itemId, size, color, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(itemId, size, color);
      return;
    }

    const updatedItems = cartItems.map(item =>
      item.id === itemId && item.size === size && item.color === color
        ? { ...item, quantity: newQuantity }
        : item
    );
    saveCart(updatedItems);
  };

  const removeFromCart = (itemId, size, color) => {
    const updatedItems = cartItems.filter(item => 
      !(item.id === itemId && item.size === size && item.color === color)
    );
    saveCart(updatedItems);
  };

  const clearCart = () => {
    saveCart([]);
  };

  const getTotalItems = () => {
    return cartItems.reduce((total, item) => total + item.quantity, 0);
  };

  const getTotalPrice = () => {
    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const handleCheckout = () => {
    if (cartItems.length === 0) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage –¥–ª—è checkout
    try {
      localStorage.setItem('checkout_cart', JSON.stringify(cartItems));
      localStorage.setItem('checkout_total', JSON.stringify(getTotalPrice()));
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      window.location.href = '/checkout';
    } catch (error) {
      console.error('Error saving checkout data:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞');
    }
  };

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div className="relative" ref={dropdownRef}>
      {/* –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã */}
      <button
        onClick={toggleDropdown}
        className="btn btn-ghost btn-sm relative p-2 hover:bg-gray-600 transition-all duration-200 text-gray-200 hover:text-white cart-button"
      >
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4m1.6 8L6 11H4m3 2v6a1 1 0 001 1h10a1 1 0 001-1v-6M9 21v-2a1 1 0 011-1h4a1 1 0 011 1v2" />
        </svg>
        
        {/* Badge —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ */}
        {getTotalItems() > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full w-5 h-5 flex items-center justify-center animate-scale-in">
            {getTotalItems() > 99 ? '99+' : getTotalItems()}
          </span>
        )}
      </button>

      {/* Dropdown –º–µ–Ω—é */}
      {isOpen && (
        <div 
          className="fixed inset-0 z-50 flex items-center justify-center p-4 sm:absolute sm:inset-auto sm:right-0 sm:top-full sm:mt-2 sm:w-80 sm:w-96 sm:bg-gray-700 sm:rounded-xl sm:shadow-2xl sm:border sm:border-gray-600 sm:animate-fade-in sm:max-h-[80vh] sm:overflow-hidden sm:transform sm:-translate-x-1/2 sm:translate-x-0 cart-dropdown"
          onClick={(e) => {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ñ–æ–Ω (—Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
            if (e.target === e.currentTarget) {
              setIsOpen(false);
            }
          }}
        >
          {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è */}
          <div className="w-full max-w-md bg-gray-700 rounded-xl shadow-2xl border border-gray-600 max-h-[90vh] overflow-hidden sm:hidden">
            <div className="p-4">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">–ö–æ—Ä–∑–∏–Ω–∞</h3>
                <button
                  onClick={() => setIsOpen(false)}
                  className="text-gray-400 hover:text-white text-2xl font-bold p-1 rounded hover:bg-gray-600 transition-colors"
                >
                  √ó
                </button>
              </div>

              {/* –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ */}
              {cartItems.length === 0 ? (
                <div className="text-center py-8">
                  <div className="text-gray-400 text-4xl mb-3">üõí</div>
                  <p className="text-gray-300 mb-4">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                  <a 
                    href="/products" 
                    className="inline-block bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                    onClick={() => setIsOpen(false)}
                  >
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º
                  </a>
                </div>
              ) : (
                <>
                  {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
                  <div className="max-h-64 overflow-y-auto space-y-3 mb-4">
                    {cartItems.map((item, index) => (
                      <div key={`cart-item-${index}-${item.id || 'no-id'}-${item.size || 'no-size'}-${item.color || 'no-color'}`} className="flex items-center space-x-3 p-3 bg-gray-600 rounded-lg">
                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                        <div className="w-12 h-12 bg-gradient-to-br from-gray-500 to-gray-400 rounded-lg flex items-center justify-center text-gray-200 text-sm font-medium overflow-hidden flex-shrink-0">
                          {item.image ? (
                            <Image src={item.image} alt={item.name} className="w-full h-full object-cover" width={48} height={48} />
                          ) : (
                            'üëï'
                          )}
                        </div>

                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                        <div className="flex-1 min-w-0">
                          <h4 className="text-sm font-semibold text-white truncate">{item.name}</h4>
                          <div className="text-xs text-gray-300">
                            {item.size} ‚Ä¢ {item.color}
                          </div>
                          <div className="text-sm font-bold text-blue-400">
                            {item.price} ‚ÇΩ √ó {item.quantity}
                          </div>
                        </div>

                        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º */}
                        <div className="flex flex-col items-end space-y-2">
                          <div className="flex items-center space-x-1">
                            <button
                              onClick={() => updateQuantity(item.id, item.size, item.color, item.quantity - 1)}
                              className="w-8 h-8 rounded-full bg-gray-500 hover:bg-gray-400 flex items-center justify-center text-white transition-colors touch-manipulation cart-quantity-button"
                            >
                              ‚àí
                            </button>
                            <span className="text-sm font-medium w-8 text-center text-white">{item.quantity}</span>
                            <button
                              onClick={() => updateQuantity(item.id, item.size, item.color, item.quantity + 1)}
                              className="w-8 h-8 rounded-full bg-gray-500 hover:bg-gray-400 flex items-center justify-center text-white transition-colors touch-manipulation cart-quantity-button"
                            >
                              +
                            </button>
                          </div>
                          <button
                            onClick={() => removeFromCart(item.id, item.size, item.color)}
                            className="text-xs text-red-400 hover:text-red-300 transition-colors px-2 py-1 rounded hover:bg-gray-500"
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* –ò—Ç–æ–≥–æ */}
                  <div className="border-t border-gray-600 pt-4">
                    <div className="flex justify-between items-center mb-4">
                      <span className="text-base font-medium text-white">–ò—Ç–æ–≥–æ:</span>
                      <span className="text-lg font-bold text-blue-400">{getTotalPrice()} ‚ÇΩ</span>
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∏ */}
                    <div className="space-y-3">
                      <button
                        onClick={handleCheckout}
                        className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors font-medium flex items-center justify-center touch-manipulation"
                      >
                        –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                        <svg className="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                        </svg>
                      </button>
                      <button
                        onClick={() => setIsOpen(false)}
                        className="w-full bg-gray-600 text-white py-3 px-4 rounded-lg hover:bg-gray-500 transition-colors font-medium touch-manipulation"
                      >
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
                      </button>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>

          {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
          <div className="hidden sm:block w-80 sm:w-96 bg-gray-700 rounded-xl shadow-2xl border border-gray-600 animate-fade-in max-h-[80vh] overflow-hidden transform -translate-x-1/2 sm:translate-x-0">
            <div className="p-4">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">–ö–æ—Ä–∑–∏–Ω–∞</h3>
                {cartItems.length > 0 && (
                  <button
                    onClick={clearCart}
                    className="text-red-400 hover:text-red-300 text-sm font-medium px-2 py-1 rounded hover:bg-gray-600 transition-colors cart-button touch-manipulation"
                  >
                    –û—á–∏—Å—Ç–∏—Ç—å
                  </button>
                )}
              </div>

              {/* –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ */}
              {cartItems.length === 0 ? (
                <div className="text-center py-8">
                  <div className="text-gray-400 text-4xl mb-3">üõí</div>
                  <p className="text-gray-300 mb-4">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                  <a 
                    href="/products" 
                    className="inline-block bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                    onClick={() => setIsOpen(false)}
                  >
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º
                  </a>
                </div>
              ) : (
                <>
                  {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
                  <div className="max-h-64 overflow-y-auto space-y-3 mb-4">
                    {cartItems.map((item, index) => (
                      <div key={`cart-item-${index}-${item.id || 'no-id'}-${item.size || 'no-size'}-${item.color || 'no-color'}`} className="flex items-center space-x-3 p-3 bg-gray-600 rounded-lg">
                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                        <div className="w-12 h-12 bg-gradient-to-br from-gray-500 to-gray-400 rounded-lg flex items-center justify-center text-gray-200 text-sm font-medium overflow-hidden flex-shrink-0">
                          {item.image ? (
                            <Image src={item.image} alt={item.name} className="w-full h-full object-cover" width={48} height={48} />
                          ) : (
                            'üëï'
                          )}
                        </div>

                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                        <div className="flex-1 min-w-0">
                          <h4 className="text-sm font-semibold text-white truncate">{item.name}</h4>
                          <div className="text-xs text-gray-300">
                            {item.size} ‚Ä¢ {item.color}
                          </div>
                          <div className="text-sm font-bold text-blue-400">
                            {item.price} ‚ÇΩ √ó {item.quantity}
                          </div>
                        </div>

                        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º */}
                        <div className="flex flex-col items-end space-y-2">
                          <div className="flex items-center space-x-1">
                            <button
                              onClick={() => updateQuantity(item.id, item.size, item.color, item.quantity - 1)}
                              className="w-8 h-8 rounded-full bg-gray-500 hover:bg-gray-400 flex items-center justify-center text-white transition-colors touch-manipulation cart-quantity-button"
                            >
                              ‚àí
                            </button>
                            <span className="text-sm font-medium w-8 text-center text-white">{item.quantity}</span>
                            <button
                              onClick={() => updateQuantity(item.id, item.size, item.color, item.quantity + 1)}
                              className="w-8 h-8 rounded-full bg-gray-500 hover:bg-gray-400 flex items-center justify-center text-white transition-colors touch-manipulation cart-quantity-button"
                            >
                              +
                            </button>
                          </div>
                          <button
                            onClick={() => removeFromCart(item.id, item.size, item.color)}
                            className="text-xs text-red-400 hover:text-red-300 transition-colors px-2 py-1 rounded hover:bg-gray-500"
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* –ò—Ç–æ–≥–æ */}
                  <div className="border-t border-gray-600 pt-4">
                    <div className="flex justify-between items-center mb-4">
                      <span className="text-base font-medium text-white">–ò—Ç–æ–≥–æ:</span>
                      <span className="text-lg font-bold text-blue-400">{getTotalPrice()} ‚ÇΩ</span>
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∏ */}
                    <div className="space-y-3">
                      <button
                        onClick={handleCheckout}
                        className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors font-medium flex items-center justify-center touch-manipulation"
                      >
                        –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                        <svg className="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                        </svg>
                      </button>
                      <button
                        onClick={() => setIsOpen(false)}
                        className="w-full bg-gray-600 text-white py-3 px-4 rounded-lg hover:bg-gray-500 transition-colors font-medium touch-manipulation"
                      >
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
                      </button>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö)
export function useCart() {
  const [cartItems, setCartItems] = useState([]);

  const loadCart = () => {
    try {
      const savedCart = localStorage.getItem('printshop_cart');
      if (savedCart) {
        const parsedCart = JSON.parse(savedCart);
        setCartItems(Array.isArray(parsedCart) ? parsedCart : []);
      } else {
        setCartItems([]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      setCartItems([]);
    }
  };

  const addToCart = (product) => {
    try {
      const savedCart = localStorage.getItem('printshop_cart');
      const currentCart = savedCart ? JSON.parse(savedCart) : [];
      
      const existingItem = currentCart.find(item => 
        item.id === product.id && 
        item.size === product.size && 
        item.color === product.color
      );

      let updatedCart;
      if (existingItem) {
        updatedCart = currentCart.map(item =>
          item.id === existingItem.id && 
          item.size === existingItem.size && 
          item.color === existingItem.color
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        const newItem = {
          id: product.id || Date.now(),
          name: product.name,
          price: product.price,
          image: product.image,
          size: product.size || 'M',
          color: product.color || '–±–µ–ª—ã–π',
          quantity: product.quantity || 1,
          addedAt: new Date().toISOString()
        };
        updatedCart = [...currentCart, newItem];
      }

      localStorage.setItem('printshop_cart', JSON.stringify(updatedCart));
      setCartItems(updatedCart);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
      window.dispatchEvent(new CustomEvent('cartUpdated'));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (window.showCartNotification) {
        window.showCartNotification(`${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
    }
  };

  return {
    cartItems,
    loadCart,
    addToCart
  };
}