'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import ProductCard from '@/components/ProductCard';
import UserProfile from '@/components/UserProfile';
import MobileMenu from '@/components/MobileMenu';
import CartDropdown from '@/components/CartDropdown';
import CartNotification from '@/components/CartNotification';
import { ProductGridSkeleton } from '@/components/LoadingSkeletons';
import Image from 'next/image';
import { useProductsCache } from '@/components/useProductsCache';
import { useInfiniteScroll } from '@/components/useInfiniteScroll';

export default function ProductsPageContent() {
  const [products, setProducts] = useState([]);
  const [sections, setSections] = useState([]);
  const [selectedSection, setSelectedSection] = useState('all');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Infinite scroll
  const [currentPage, setCurrentPage] = useState(1);
  const [totalProducts, setTotalProducts] = useState(0);
  const [hasMore, setHasMore] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { getCachedData, setCachedData, hasCachedData, getCacheStats } = useProductsCache();
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–∞–∑–¥–µ–ª–∞
        const cacheKey = `${selectedSection}:${currentPage}`;
        if (hasCachedData(cacheKey)) {
          console.log('üìñ Using cached data for:', cacheKey);
          const cachedData = getCachedData(cacheKey);
          setProducts(cachedData.products || []);
          setSections(cachedData.sections || []);
          setTotalProducts(cachedData.pagination?.totalProducts || 0);
          setHasMore(cachedData.pagination?.hasNextPage || false);
          setLoading(false);
          return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        const response = await fetch(`/api/products/paginated?page=${currentPage}&limit=20&section=${selectedSection}`);
        if (!response.ok) throw new Error('Failed to fetch products');
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setProducts(data.products || []);
        setSections(data.sections || []);
        setTotalProducts(data.pagination?.totalProducts || 0);
        setHasMore(data.pagination?.hasNextPage || false);
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setCachedData(cacheKey, data);
        
        console.log(`‚úÖ Loaded page ${currentPage} with ${data.products?.length || 0} products`);
        
      } catch (err) {
        console.error('Error fetching products:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [currentPage, selectedSection, hasCachedData, getCachedData, setCachedData]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è infinite scroll
  const loadMoreProducts = async () => {
    if (isLoadingMore || !hasMore) return;
    
    try {
      setIsLoadingMore(true);
      const nextPage = currentPage + 1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const cacheKey = `${selectedSection}:${nextPage}`;
      if (hasCachedData(cacheKey)) {
        console.log('üìñ Using cached data for next page:', cacheKey);
        const cachedData = getCachedData(cacheKey);
        setProducts(prev => [...prev, ...(cachedData.products || [])]);
        setHasMore(cachedData.pagination?.hasNextPage || false);
        setCurrentPage(nextPage);
        return;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const response = await fetch(`/api/products/paginated?page=${nextPage}&limit=20&section=${selectedSection}`);
      if (!response.ok) throw new Error('Failed to fetch more products');
      
      const data = await response.json();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      setProducts(prev => [...prev, ...(data.products || [])]);
      setHasMore(data.pagination?.hasNextPage || false);
      setCurrentPage(nextPage);
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setCachedData(cacheKey, data);
      
      console.log(`‚úÖ Loaded page ${nextPage} with ${data.products?.length || 0} additional products`);
      
    } catch (err) {
      console.error('Error loading more products:', err);
    } finally {
      setIsLoadingMore(false);
    }
  };
  
  // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∑–¥–µ–ª–∞
  useEffect(() => {
    setCurrentPage(1);
    setProducts([]);
    setHasMore(true);
  }, [selectedSection]);
  
  // Infinite scroll (–ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è loadMoreProducts)
  const { lastElementCallback } = useInfiniteScroll(loadMoreProducts, hasMore, isLoadingMore);
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª—É (—Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
  const filteredProducts = products;

  return (
    <div className="min-h-screen bg-gray-800">
      {/* Header */}
      <header className="shadow-lg sticky top-0 z-40" style={{backgroundColor: '#424242'}}>
        <div className="container">
          <div className="flex justify-between items-center py-1">
            <div className="flex items-center space-x-8">
              <h1 className="text-2xl logo-print-shop h-full flex items-center">
                <Link href="/" className="text-white hover:text-gray-200 transition-colors duration-200 h-full flex items-center">
                  <div className="hidden md:block">
                    <Image 
                      src="/print-style-logo.png" 
                      alt="Print Style Logo" 
                      width={120} 
                      height={40}
                      className="h-full w-auto"
                    />
                  </div>
                  <div className="md:hidden">
                    <Image 
                      src="/print-style-logo.png" 
                      alt="Print Style Logo" 
                      width={120} 
                      height={40}
                      className="h-full w-auto"
                    />
                  </div>
                </Link>
              </h1>
            </div>
            
            {/* Desktop Navigation */}
            <nav className="hidden md:flex items-center space-x-1">
              <Link href="/#main" className="px-4 py-2 text-sm font-medium text-gray-200 hover:text-white transition-colors rounded-lg">–ì–ª–∞–≤–Ω–∞—è</Link>
              <Link href="/products" className="px-4 py-2 text-sm font-medium text-white hover:text-gray-200 transition-colors rounded-lg">–¢–æ–≤–∞—Ä—ã</Link>
              <Link href="/reviews" className="px-4 py-2 text-sm font-medium text-gray-200 hover:text-white hover:bg-gray-600 transition-all rounded-lg">–û—Ç–∑—ã–≤—ã</Link>
              <Link href="/#about" className="px-4 py-2 text-sm font-medium text-gray-200 hover:text-white hover:bg-gray-600 transition-all rounded-lg">–û –Ω–∞—Å</Link>
              <div className="flex items-center space-x-3 ml-4">
                <CartDropdown />
                <UserProfile />
              </div>
            </nav>
            
            {/* Mobile Menu */}
            <MobileMenu />
          </div>
        </div>
      </header>
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="container py-12 lg:py-16">
        <h1 className="text-hero text-white mb-6 text-center">–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</h1>
        <p className="text-body text-gray-300 max-w-2xl mx-auto text-center mb-12">
          –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏. –í—Å–µ –∏–∑–¥–µ–ª–∏—è –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–æ–¥ –∑–∞–∫–∞–∑ —Å –≤–∞—à–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.
        </p>
        
        {loading ? (
          <ProductGridSkeleton count={8} />
        ) : error ? (
          <div className="text-center text-red-400">–û—à–∏–±–∫–∞: {error}</div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {filteredProducts.map((product, index) => (
              <div
                key={product.id || `product-${index}`}
                ref={index === filteredProducts.length - 1 ? lastElementCallback : null}
              >
                <ProductCard product={product} />
              </div>
            ))}
          </div>
        )}
        
        {hasMore && (
          <div className="mt-8 text-center">
            {isLoadingMore ? (
              <div className="text-gray-400">–ó–∞–≥—Ä—É–∂–∞–µ–º –µ—â–µ —Ç–æ–≤–∞—Ä—ã...</div>
            ) : (
              <button
                onClick={loadMoreProducts}
                className="text-blue-400 hover:text-blue-300 text-sm underline"
              >
                –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã
              </button>
            )}
          </div>
        )}
      </div>
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É */}
      <CartNotification />
    </div>
  );
} 