// src/components/useProductsCache.js
// –•—É–∫ –¥–ª—è —É–º–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ

import { useState, useEffect, useCallback, useRef } from 'react';

const CACHE_KEY = 'printshop_products_cache';
const CACHE_TTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

export function useProductsCache() {
  const [cache, setCache] = useState(new Map());
  const [lastUpdate, setLastUpdate] = useState(0);
  const cacheRef = useRef(new Map());
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ localStorage
  const loadCache = useCallback(() => {
    try {
      const cached = localStorage.getItem(CACHE_KEY);
      if (cached) {
        const { data, timestamp } = JSON.parse(cached);
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if (now - timestamp < CACHE_TTL) {
          cacheRef.current = new Map(Object.entries(data));
          setCache(cacheRef.current);
          setLastUpdate(timestamp);
          console.log('üìñ Products cache loaded from localStorage');
          return true;
        } else {
          console.log('‚è∞ Products cache expired, clearing...');
          localStorage.removeItem(CACHE_KEY);
        }
      }
    } catch (error) {
      console.error('Error loading products cache:', error);
      localStorage.removeItem(CACHE_KEY);
    }
    return false;
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ localStorage
  const saveCache = useCallback((data) => {
    try {
      const cacheData = {
        data: Object.fromEntries(cacheRef.current),
        timestamp: Date.now()
      };
      localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));
      console.log('üíæ Products cache saved to localStorage');
    } catch (error) {
      console.error('Error saving products cache:', error);
    }
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
  const getCachedData = useCallback((key) => {
    return cacheRef.current.get(key);
  }, []);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
  const setCachedData = useCallback((key, data) => {
    cacheRef.current.set(key, data);
    setCache(new Map(cacheRef.current));
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    setTimeout(() => saveCache(), 100);
  }, [saveCache]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ
  const hasCachedData = useCallback((key) => {
    return cacheRef.current.has(key);
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  const clearCache = useCallback(() => {
    cacheRef.current.clear();
    setCache(new Map());
    localStorage.removeItem(CACHE_KEY);
    setLastUpdate(0);
    console.log('üßπ Products cache cleared');
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
  const getCacheStats = useCallback(() => {
    return {
      size: cacheRef.current.size,
      keys: Array.from(cacheRef.current.keys()),
      lastUpdate: new Date(lastUpdate).toLocaleString(),
      age: lastUpdate ? Math.round((Date.now() - lastUpdate) / 1000) : 0
    };
  }, [lastUpdate]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadCache();
    
    // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
    const cleanupInterval = setInterval(() => {
      const now = Date.now();
      if (now - lastUpdate > CACHE_TTL) {
        console.log('‚è∞ Auto-clearing expired cache...');
        clearCache();
      }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    return () => clearInterval(cleanupInterval);
  }, [loadCache, lastUpdate, clearCache]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏
  useEffect(() => {
    const handleStorageChange = (e) => {
      if (e.key === CACHE_KEY) {
        console.log('üîÑ Products cache updated from another tab');
        loadCache();
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [loadCache]);

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getCachedData,
    setCachedData,
    hasCachedData,
    clearCache,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getCacheStats,
    cacheSize: cache.size,
    lastUpdate,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    loadCache,
    saveCache
  };
} 